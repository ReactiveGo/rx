// +build generate

package main

//go:generate rxgo

//rxgo:package

// No package so generates as part of the current package main using name reactivex.go
//rxgo:type Int	observable int

// Package name is observable; this will generate folder 'observable' with file 'observable/reactivex.go'
//rxgo:package observable
//rxgo:import "github.com/xpt-nl/appy"
//rxgo:type observable.Int					observable int
//rxgo:type observable.Int.FlatMapRequest()	flatmap[int]*appy.Request

// Package name is rx; this will generate folder 'rx' with file 'rx/reactivex.go'
//rxgo:package rx
//rxgo:type rx.Float64				observable float64
//rxgo:type rx.Int.MapFloat64()		map[int]float64
//rxgo:type rx.Int.FlatMapFloat64()	flatmap[int]float64

// Using observable golang types like Int,Bool,Float64,String etc. (all non-composite) from rxgo directly.
//
// import (
// 	"xtp.nl/rxgo/observable"
// )

// func main() {
// 	data := observable.FromInts([1,2,3,4,5])

// }

/*
Generate the rx package folder from types specified in this file.
Do this by calling

	go generate myapp

Or alternatively

	go generate  $GOPATH/src/myapp/rx_gen.go

Here myapp is at $GOPATH/src/myapp and inside this folder is a file named rx_gen.go that contains a '//go:generate rxgo' line.

Running rxgo will open the file in which the line '//go:generate rxgo' has been placed.
The rxgo program will start looking for lines that start with '//rxgo:'
The type definition at the end of the line is interpreted and a type is generated in a subfolder.

The types to generate need to be put at the start of a line with prefix //rxgo:type and no spaces between // and rxgo:type.
The name e.g. "observable.Int" should match the name generated by interpreting the type specification "observable int".





*/
