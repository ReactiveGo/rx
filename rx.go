// Code generated by jig; DO NOT EDIT.

//go:generate jig

package rx

import (
	"fmt"
	"sync"
	"sync/atomic"
	"time"

	"github.com/reactivego/scheduler"
	"github.com/reactivego/subscriber"
)

//jig:name Subscriber

// Subscriber is an interface that can be passed in when subscribing to an
// Observable. It allows a set of observable subscriptions to be canceled
// from a single subscriber at the root of the subscription tree.
type Subscriber = subscriber.Subscriber

//jig:name NewSubscriber

// NewSubscriber creates a new subscriber.
func NewSubscriber() Subscriber {
	return subscriber.New()
}

//jig:name Scheduler

// Scheduler is used to schedule tasks to support subscribing and observing.
type Scheduler = scheduler.Scheduler

//jig:name GoroutineScheduler

func GoroutineScheduler() Scheduler {
	return scheduler.Goroutine
}

//jig:name TrampolineScheduler

func TrampolineScheduler() Scheduler {
	return scheduler.Trampoline
}

//jig:name Observer

// Observer is a function that gets called whenever the Observable has
// something to report. The next argument is the item value that is only
// valid when the done argument is false. When done is true and the err
// argument is not nil, then the Observable has terminated with an error.
// When done is true and the err argument is nil, then the Observable has
// completed normally.
type Observer func(next interface{}, err error, done bool)

//jig:name Observable

// Observable is a function taking an Observer, Scheduler and Subscriber.
// Calling it will subscribe the Observer to events from the Observable.
type Observable func(Observer, Scheduler, Subscriber)

//jig:name BoolObserver

// BoolObserver is a function that gets called whenever the Observable has
// something to report. The next argument is the item value that is only
// valid when the done argument is false. When done is true and the err
// argument is not nil, then the Observable has terminated with an error.
// When done is true and the err argument is nil, then the Observable has
// completed normally.
type BoolObserver func(next bool, err error, done bool)

//jig:name ObservableBool

// ObservableBool is a function taking an Observer, Scheduler and Subscriber.
// Calling it will subscribe the Observer to events from the Observable.
type ObservableBool func(BoolObserver, Scheduler, Subscriber)

//jig:name IntObserver

// IntObserver is a function that gets called whenever the Observable has
// something to report. The next argument is the item value that is only
// valid when the done argument is false. When done is true and the err
// argument is not nil, then the Observable has terminated with an error.
// When done is true and the err argument is nil, then the Observable has
// completed normally.
type IntObserver func(next int, err error, done bool)

//jig:name ObservableInt

// ObservableInt is a function taking an Observer, Scheduler and Subscriber.
// Calling it will subscribe the Observer to events from the Observable.
type ObservableInt func(IntObserver, Scheduler, Subscriber)

//jig:name ObservableObserver

// ObservableObserver is a function that gets called whenever the Observable has
// something to report. The next argument is the item value that is only
// valid when the done argument is false. When done is true and the err
// argument is not nil, then the Observable has terminated with an error.
// When done is true and the err argument is nil, then the Observable has
// completed normally.
type ObservableObserver func(next Observable, err error, done bool)

//jig:name ObservableObservable

// ObservableObservable is a function taking an Observer, Scheduler and Subscriber.
// Calling it will subscribe the Observer to events from the Observable.
type ObservableObservable func(ObservableObserver, Scheduler, Subscriber)

//jig:name Error

// Error signals an error condition.
type Error func(error)

//jig:name Complete

// Complete signals that no more data is to be expected.
type Complete func()

//jig:name Canceled

// Canceled returns true when the observer has unsubscribed.
type Canceled func() bool

//jig:name Next

// Next can be called to emit the next value to the IntObserver.
type Next func(interface{})

//jig:name Create

// Create provides a way of creating an Observable from
// scratch by calling observer methods programmatically.
//
// The create function provided to Create will be called once
// to implement the observable. It is provided with a Next, Error,
// Complete and Canceled function that can be called by the code that
// implements the Observable.
func Create(create func(Next, Error, Complete, Canceled)) Observable {
	var zero interface{}
	observable := func(observe Observer, scheduler Scheduler, subscriber Subscriber) {
		runner := scheduler.Schedule(func() {
			if subscriber.Canceled() {
				return
			}
			n := func(next interface{}) {
				if subscriber.Subscribed() {
					observe(next, nil, false)
				}
			}
			e := func(err error) {
				if subscriber.Subscribed() {
					observe(zero, err, true)
				}
			}
			c := func() {
				if subscriber.Subscribed() {
					observe(zero, nil, true)
				}
			}
			x := func() bool {
				return subscriber.Canceled()
			}
			create(n, e, c, x)
		})
		subscriber.OnUnsubscribe(runner.Cancel)
	}
	return observable
}

//jig:name CreateRecursive

// CreateRecursive provides a way of creating an Observable from
// scratch by calling observer methods programmatically.
//
// The create function provided to CreateRecursive will be called
// repeatedly to implement the observable. It is provided with a Next, Error
// and Complete function that can be called by the code that implements the
// Observable.
func CreateRecursive(create func(Next, Error, Complete)) Observable {
	var zero interface{}
	observable := func(observe Observer, scheduler Scheduler, subscriber Subscriber) {
		done := false
		runner := scheduler.ScheduleRecursive(func(self func()) {
			if subscriber.Canceled() {
				return
			}
			n := func(next interface{}) {
				if subscriber.Subscribed() {
					observe(next, nil, false)
				}
			}
			e := func(err error) {
				done = true
				if subscriber.Subscribed() {
					observe(zero, err, true)
				}
			}
			c := func() {
				done = true
				if subscriber.Subscribed() {
					observe(zero, nil, true)
				}
			}
			create(n, e, c)
			if !done && subscriber.Subscribed() {
				self()
			}
		})
		subscriber.OnUnsubscribe(runner.Cancel)
	}
	return observable
}

//jig:name CreateFutureRecursive

// CreateFutureRecursive provides a way of creating an Observable from
// scratch by calling observer methods programmatically.
//
// The create function provided to CreateFutureRecursive will be called
// repeatedly to implement the observable. It is provided with a Next, Error
// and Complete function that can be called by the code that implements the
// Observable.
//
// The timeout passed in determines the time before calling the create
// function. The time.Duration returned by the create function determines how
// long CreateFutureRecursive has to wait before calling the create function
// again.
func CreateFutureRecursive(timeout time.Duration, create func(Next, Error, Complete) time.Duration) Observable {
	var zero interface{}
	observable := func(observe Observer, scheduler Scheduler, subscriber Subscriber) {
		done := false
		runner := scheduler.ScheduleFutureRecursive(timeout, func(self func(time.Duration)) {
			if subscriber.Canceled() {
				return
			}
			n := func(next interface{}) {
				if subscriber.Subscribed() {
					observe(next, nil, false)
				}
			}
			e := func(err error) {
				done = true
				if subscriber.Subscribed() {
					observe(zero, err, true)
				}
			}
			c := func() {
				done = true
				if subscriber.Subscribed() {
					observe(zero, nil, true)
				}
			}
			timeout = create(n, e, c)
			if !done && subscriber.Subscribed() {
				self(timeout)
			}
		})
		subscriber.OnUnsubscribe(runner.Cancel)
	}
	return observable
}

//jig:name Defer

// Defer does not create the Observable until the observer subscribes,
// and creates a fresh Observable for each observer.
func Defer(factory func() Observable) Observable {
	observable := func(observe Observer, scheduler Scheduler, subscriber Subscriber) {
		factory()(observe, scheduler, subscriber)
	}
	return observable
}

//jig:name Empty

// Empty creates an Observable that emits no items but terminates normally.
func Empty() Observable {
	var zero interface{}
	observable := func(observe Observer, scheduler Scheduler, subscriber Subscriber) {
		runner := scheduler.Schedule(func() {
			if subscriber.Subscribed() {
				observe(zero, nil, true)
			}
		})
		subscriber.OnUnsubscribe(runner.Cancel)
	}
	return observable
}

//jig:name From

// From creates an Observable from multiple interface{} values passed in.
func From(slice ...interface{}) Observable {
	var zero interface{}
	observable := func(observe Observer, scheduler Scheduler, subscriber Subscriber) {
		i := 0
		runner := scheduler.ScheduleRecursive(func(self func()) {
			if subscriber.Subscribed() {
				if i < len(slice) {
					observe(slice[i], nil, false)
					if subscriber.Subscribed() {
						i++
						self()
					}
				} else {
					observe(zero, nil, true)
				}
			}
		})
		subscriber.OnUnsubscribe(runner.Cancel)
	}
	return observable
}

//jig:name FromChan

// FromChan creates an Observable from a Go channel of interface{}
// values. This allows the code feeding into the channel to send either an error
// or the next value. The feeding code can send nil or more items and then
// closing the channel will be seen as completion. When the feeding code sends
// an error into the channel, it should close the channel immediately to
// indicate termination with error.
func FromChan(ch <-chan interface{}) Observable {
	observable := func(observe Observer, scheduler Scheduler, subscriber Subscriber) {
		runner := scheduler.ScheduleRecursive(func(self func()) {
			if subscriber.Canceled() {
				return
			}
			next, ok := <-ch
			if subscriber.Canceled() {
				return
			}
			if ok {
				err, ok := next.(error)
				if !ok {
					observe(next, nil, false)
					if subscriber.Subscribed() {
						self()
					}
				} else {
					observe(nil, err, true)
				}
			} else {
				observe(nil, nil, true)
			}
		})
		subscriber.OnUnsubscribe(runner.Cancel)
	}
	return observable
}

//jig:name Interval

// Interval creates an ObservableInt that emits a sequence of integers spaced
// by a particular time interval. First integer is emitted after the first time
// interval expires.
func Interval(interval time.Duration) ObservableInt {
	observable := func(observe IntObserver, scheduler Scheduler, subscriber Subscriber) {
		i := 0
		runner := scheduler.ScheduleFutureRecursive(interval, func(self func(time.Duration)) {
			if subscriber.Canceled() {
				return
			}
			observe(i, nil, false)
			if subscriber.Canceled() {
				return
			}
			i++
			self(interval)
		})
		subscriber.OnUnsubscribe(runner.Cancel)
	}
	return observable
}

//jig:name Just

// Just creates an Observable that emits a particular item.
func Just(element interface{}) Observable {
	var zero interface{}
	observable := func(observe Observer, scheduler Scheduler, subscriber Subscriber) {
		runner := scheduler.Schedule(func() {
			if subscriber.Subscribed() {
				observe(element, nil, false)
			}
			if subscriber.Subscribed() {
				observe(zero, nil, true)
			}
		})
		subscriber.OnUnsubscribe(runner.Cancel)
	}
	return observable
}

//jig:name Never

// Never creates an Observable that emits no items and does't terminate.
func Never() Observable {
	observable := func(observe Observer, scheduler Scheduler, subscriber Subscriber) {
	}
	return observable
}

//jig:name Range

// Range creates an ObservableInt that emits a range of sequential integers.
func Range(start, count int) ObservableInt {
	end := start + count
	observable := func(observe IntObserver, scheduler Scheduler, subscriber Subscriber) {
		i := start
		runner := scheduler.ScheduleRecursive(func(self func()) {
			if subscriber.Subscribed() {
				if i < end {
					observe(i, nil, false)
					if subscriber.Subscribed() {
						i++
						self()
					}
				} else {
					observe(0, nil, true)
				}
			}
		})
		subscriber.OnUnsubscribe(runner.Cancel)
	}
	return observable
}

//jig:name Start

// Start creates an Observable that emits the return value of a function.
// It is designed to be used with a function that returns a (interface{}, error) tuple.
// If the error is non-nil the returned Observable will be an Observable that
// emits and error, otherwise it will be a single-value Observable of the value.
func Start(f func() (interface{}, error)) Observable {
	var zero interface{}
	observable := func(observe Observer, scheduler Scheduler, subscriber Subscriber) {
		done := false
		runner := scheduler.ScheduleRecursive(func(self func()) {
			if subscriber.Subscribed() {
				if !done {
					if next, err := f(); err == nil {
						observe(next, nil, false)
						if subscriber.Subscribed() {
							done = true
							self()
						}
					} else {
						observe(zero, err, true)
					}
				} else {
					observe(zero, nil, true)
				}
			}
		})
		subscriber.OnUnsubscribe(runner.Cancel)
	}
	return observable
}

//jig:name Throw

// Throw creates an Observable that emits no items and terminates with an
// error.
func Throw(err error) Observable {
	var zero interface{}
	observable := func(observe Observer, scheduler Scheduler, subscriber Subscriber) {
		runner := scheduler.Schedule(func() {
			if subscriber.Subscribed() {
				observe(zero, err, true)
			}
		})
		subscriber.OnUnsubscribe(runner.Cancel)
	}
	return observable
}

//jig:name RxError

type RxError string

func (e RxError) Error() string	{ return string(e) }

//jig:name Slice

type Slice = []interface{}

//jig:name ObservableObservableCombineLatestAll

// CombineLatestAll flattens a higher order observable
// (e.g. ObservableObservable) by subscribing to
// all emitted observables (ie. Observable entries) until the source
// completes. It will then wait for all of the subscribed Observables
// to emit before emitting the first slice. Whenever any of the subscribed
// observables emits, a new slice will be emitted containing all the latest
// value.
func (o ObservableObservable) CombineLatestAll() ObservableSlice {
	var zero interface{}
	var zeroSlice []interface{}
	observable := func(observe SliceObserver, subscribeOn Scheduler, subscriber Subscriber) {
		observables := []Observable(nil)
		var observers struct {
			sync.Mutex
			values		[]interface{}
			initialized	int
			active		int
		}
		makeObserver := func(index int) Observer {
			observer := func(next interface{}, err error, done bool) {
				observers.Lock()
				defer observers.Unlock()
				if observers.active > 0 {
					switch {
					case !done:
						if observers.values[index] == zero {
							observers.initialized++
						}
						observers.values[index] = next
						if observers.initialized == len(observers.values) {
							observe(observers.values, nil, false)
						}
					case err != nil:
						observers.active = 0
						observe(zeroSlice, err, true)
					default:
						if observers.active--; observers.active == 0 {
							observe(zeroSlice, nil, true)
						}
					}
				}
			}
			return observer
		}

		observer := func(next Observable, err error, done bool) {
			switch {
			case !done:
				observables = append(observables, next)
			case err != nil:
				observe(zeroSlice, err, true)
			default:
				subscribeOn.Schedule(func() {
					if !subscriber.Canceled() {
						numObservables := len(observables)
						observers.values = make([]interface{}, numObservables)
						observers.active = numObservables
						for i, v := range observables {
							if subscriber.Canceled() {
								return
							}
							v(makeObserver(i), subscribeOn, subscriber)
						}
					}
				})
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name CombineLatest

// CombineLatest will subscribe to all Observables. It will then wait for
// all of them to emit before emitting the first slice. Whenever any of the
// subscribed observables emits, a new slice will be emitted containing all
// the latest value.
func CombineLatest(observables ...Observable) ObservableSlice {
	return FromObservable(observables...).CombineLatestAll()
}

//jig:name Concat

// Concat emits the emissions from two or more Observables without interleaving them.
func Concat(observables ...Observable) Observable {
	if len(observables) == 0 {
		return Empty()
	}
	return observables[0].ConcatWith(observables[1:]...)
}

//jig:name Merge

// Merge combines multiple Observables into one by merging their emissions.
// An error from any of the observables will terminate the merged observables.
func Merge(observables ...Observable) Observable {
	if len(observables) == 0 {
		return Empty()
	}
	return observables[0].MergeWith(observables[1:]...)
}

//jig:name ObservableMergeDelayError

// MergeDelayError combines multiple Observables into one by merging their emissions.
// Any error will be deferred until all observables terminate.
func (o Observable) MergeDelayError(other ...Observable) Observable {
	if len(other) == 0 {
		return o
	}
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		var observers struct {
			sync.Mutex
			len	int
			err	error
		}
		observer := func(next interface{}, err error, done bool) {
			observers.Lock()
			defer observers.Unlock()
			if !done {
				observe(next, nil, false)
			} else {
				if err != nil {
					observers.err = err
				}
				if observers.len--; observers.len == 0 {
					var zero interface{}
					observe(zero, observers.err, true)
				}
			}
		}
		subscribeOn.Schedule(func() {
			if !subscriber.Canceled() {
				observers.len = 1 + len(other)
				o(observer, subscribeOn, subscriber)
				for _, o := range other {
					if subscriber.Canceled() {
						return
					}
					o(observer, subscribeOn, subscriber)
				}
			}
		})
	}
	return observable
}

//jig:name MergeDelayError

// MergeDelayError combines multiple Observables into one by merging their emissions.
// Any error will be deferred until all observables terminate.
func MergeDelayError(observables ...Observable) Observable {
	if len(observables) == 0 {
		return Empty()
	}
	return observables[0].MergeDelayError(observables[1:]...)
}

//jig:name SliceObserver

// SliceObserver is a function that gets called whenever the Observable has
// something to report. The next argument is the item value that is only
// valid when the done argument is false. When done is true and the err
// argument is not nil, then the Observable has terminated with an error.
// When done is true and the err argument is nil, then the Observable has
// completed normally.
type SliceObserver func(next Slice, err error, done bool)

//jig:name ObservableSlice

// ObservableSlice is a function taking an Observer, Scheduler and Subscriber.
// Calling it will subscribe the Observer to events from the Observable.
type ObservableSlice func(SliceObserver, Scheduler, Subscriber)

//jig:name ObservableCombineLatestWith

// CombineLatestWith will subscribe to its Observable and all other
// Observables passed in. It will then wait for all of the ObservableBars
// to emit before emitting the first slice. Whenever any of the subscribed
// observables emits, a new slice will be emitted containing all the latest
// value.
func (o Observable) CombineLatestWith(other ...Observable) ObservableSlice {
	return FromObservable(append([]Observable{o}, other...)...).CombineLatestAll()
}

//jig:name ObservableCombineLatestMap

// CombinesLatestMap maps every entry emitted by the Observable into an
// Observable, and then subscribe to it, until the source observable
// completes. It will then wait for all of the Observables to emit before
// emitting the first slice. Whenever any of the subscribed observables emits,
// a new slice will be emitted containing all the latest value.
func (o Observable) CombineLatestMap(project func(interface{}) Observable) ObservableSlice {
	return o.MapObservable(project).CombineLatestAll()
}

//jig:name ObservableCombineLatestMapTo

// CombinesLatestMapTo maps every entry emitted by the Observable into a
// single Observable, and then subscribe to it, until the source
// observable completes. It will then wait for all of the Observables
// to emit before emitting the first slice. Whenever any of the subscribed
// observables emits, a new slice will be emitted containing all the latest
// value.
func (o Observable) CombineLatestMapTo(inner Observable) ObservableSlice {
	project := func(interface{}) Observable { return inner }
	return o.MapObservable(project).CombineLatestAll()
}

//jig:name ObservableConcatWith

// ConcatWith emits the emissions from two or more Observables without interleaving them.
func (o Observable) ConcatWith(other ...Observable) Observable {
	var zero interface{}
	if len(other) == 0 {
		return o
	}
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		var (
			observables	= append([]Observable{}, other...)
			observer	Observer
		)
		observer = func(next interface{}, err error, done bool) {
			if !done || err != nil {
				observe(next, err, done)
			} else {
				if len(observables) == 0 {
					observe(zero, nil, true)
				} else {
					o := observables[0]
					observables = observables[1:]
					o(observer, subscribeOn, subscriber)
				}
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableObservableConcatAll

// ConcatAll flattens a higher order observable by concattenating the observables it emits.
func (o ObservableObservable) ConcatAll() Observable {
	var zero interface{}
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		var (
			mutex		sync.Mutex
			observables	[]Observable
			observer	Observer
		)
		observer = func(next interface{}, err error, done bool) {
			mutex.Lock()
			defer mutex.Unlock()
			if !done || err != nil {
				observe(next, err, done)
			} else {
				if len(observables) == 0 {
					observe(zero, nil, true)
				} else {
					o := observables[0]
					observables = observables[1:]
					o(observer, subscribeOn, subscriber)
				}
			}
		}
		sourceSubscriber := subscriber.Add()
		concatenator := func(next Observable, err error, done bool) {
			if !done {
				mutex.Lock()
				defer mutex.Unlock()
				observables = append(observables, next)
			} else {
				observer(zero, err, done)
				sourceSubscriber.Unsubscribe()
			}
		}
		o(concatenator, subscribeOn, sourceSubscriber)
	}
	return observable
}

//jig:name ObservableSwitchMap

// SwitchMap transforms the items emitted by an Observable by applying a
// function to each item an returning an Observable. In doing so, it behaves much like
// MergeMap (previously FlatMap), except that whenever a new Observable is emitted
// SwitchMap will unsubscribe from the previous Observable and begin emitting items
// from the newly emitted one.
func (o Observable) SwitchMap(project func(interface{}) Observable) Observable {
	return o.MapObservable(project).SwitchAll()
}

//jig:name LinkEnums

// state
const (
	linkUnsubscribed	= iota
	linkSubscribing
	linkIdle
	linkBusy
	linkError	// done:error
	linkCanceled	// externally:canceled
	linkCompleting
	linkComplete	// done:complete
)

// callbackState
const (
	callbackNil	= iota
	settingCallback
	callbackSet
)

// callbackKind
const (
	linkCallbackOnComplete	= iota
	linkCancelOrCompleted
)

//jig:name link

type linkObserver func(*link, interface{}, error, bool)

type link struct {
	observe		linkObserver
	state		int32
	callbackState	int32
	callbackKind	int
	callback	func()
	subscriber	Subscriber
}

func newInitialLink() *link {
	return &link{state: linkCompleting, subscriber: subscriber.New()}
}

func newLink(observe linkObserver, subscriber Subscriber) *link {
	return &link{
		observe:	observe,
		subscriber:	subscriber.Add(),
	}
}

func (o *link) Observe(next interface{}, err error, done bool) error {
	if !atomic.CompareAndSwapInt32(&o.state, linkIdle, linkBusy) {
		if atomic.LoadInt32(&o.state) > linkBusy {
			return RxError("Already Done")
		}
		return RxError("Recursion Error")
	}
	o.observe(o, next, err, done)
	if done {
		if err != nil {
			if !atomic.CompareAndSwapInt32(&o.state, linkBusy, linkError) {
				return RxError("Internal Error: 'busy' -> 'error'")
			}
		} else {
			if !atomic.CompareAndSwapInt32(&o.state, linkBusy, linkCompleting) {
				return RxError("Internal Error: 'busy' -> 'completing'")
			}
		}
	} else {
		if !atomic.CompareAndSwapInt32(&o.state, linkBusy, linkIdle) {
			return RxError("Internal Error: 'busy' -> 'idle'")
		}
	}
	if atomic.LoadInt32(&o.callbackState) != callbackSet {
		return nil
	}
	if atomic.CompareAndSwapInt32(&o.state, linkCompleting, linkComplete) {
		o.callback()
	}
	if o.callbackKind == linkCancelOrCompleted {
		if atomic.CompareAndSwapInt32(&o.state, linkIdle, linkCanceled) {
			o.callback()
		}
	}
	return nil
}

func (o *link) SubscribeTo(observable Observable, scheduler Scheduler) error {
	if !atomic.CompareAndSwapInt32(&o.state, linkUnsubscribed, linkSubscribing) {
		return RxError("Already Subscribed")
	}
	observer := func(next interface{}, err error, done bool) {
		o.Observe(next, err, done)
	}
	observable(observer, scheduler, o.subscriber)
	if !atomic.CompareAndSwapInt32(&o.state, linkSubscribing, linkIdle) {
		return RxError("Internal Error")
	}
	return nil
}

func (o *link) Cancel(callback func()) error {
	if !atomic.CompareAndSwapInt32(&o.callbackState, callbackNil, settingCallback) {
		return RxError("Already Waiting")
	}
	o.callbackKind = linkCancelOrCompleted
	o.callback = callback
	if !atomic.CompareAndSwapInt32(&o.callbackState, settingCallback, callbackSet) {
		return RxError("Internal Error")
	}
	o.subscriber.Unsubscribe()
	if atomic.CompareAndSwapInt32(&o.state, linkCompleting, linkComplete) {
		o.callback()
	}
	if atomic.CompareAndSwapInt32(&o.state, linkIdle, linkCanceled) {
		o.callback()
	}
	return nil
}

func (o *link) OnComplete(callback func()) error {
	if !atomic.CompareAndSwapInt32(&o.callbackState, callbackNil, settingCallback) {
		return RxError("Already Waiting")
	}
	o.callbackKind = linkCallbackOnComplete
	o.callback = callback
	if !atomic.CompareAndSwapInt32(&o.callbackState, settingCallback, callbackSet) {
		return RxError("Internal Error")
	}
	if atomic.CompareAndSwapInt32(&o.state, linkCompleting, linkComplete) {
		o.callback()
	}
	return nil
}

//jig:name ObservableObservableSwitchAll

// SwitchAll converts an Observable that emits Observables into a single Observable
// that emits the items emitted by the most-recently-emitted of those Observables.
func (o ObservableObservable) SwitchAll() Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		observer := func(link *link, next interface{}, err error, done bool) {
			if !done || err != nil {
				observe(next, err, done)
			} else {
				link.subscriber.Unsubscribe()
			}
		}
		currentLink := newInitialLink()
		var switcherMutex sync.Mutex
		switcherSubscriber := subscriber.Add()
		switcher := func(next Observable, err error, done bool) {
			switch {
			case !done:
				previousLink := currentLink
				func() {
					switcherMutex.Lock()
					defer switcherMutex.Unlock()
					currentLink = newLink(observer, subscriber)
				}()
				previousLink.Cancel(func() {
					switcherMutex.Lock()
					defer switcherMutex.Unlock()
					currentLink.SubscribeTo(next, subscribeOn)
				})
			case err != nil:
				currentLink.Cancel(func() {
					var zero interface{}
					observe(zero, err, true)
				})
				switcherSubscriber.Unsubscribe()
			default:
				currentLink.OnComplete(func() {
					var zero interface{}
					observe(zero, nil, true)
				})
				switcherSubscriber.Unsubscribe()
			}
		}
		o(switcher, subscribeOn, switcherSubscriber)
	}
	return observable
}

//jig:name ObservableMergeWith

// MergeWith combines multiple Observables into one by merging their emissions.
// An error from any of the observables will terminate the merged observables.
func (o Observable) MergeWith(other ...Observable) Observable {
	if len(other) == 0 {
		return o
	}
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		var observers struct {
			sync.Mutex
			done	bool
			len	int
		}
		observer := func(next interface{}, err error, done bool) {
			observers.Lock()
			defer observers.Unlock()
			if !observers.done {
				switch {
				case !done:
					observe(next, nil, false)
				case err != nil:
					observers.done = true
					var zero interface{}
					observe(zero, err, true)
				default:
					if observers.len--; observers.len == 0 {
						var zero interface{}
						observe(zero, nil, true)
					}
				}
			}
		}
		subscribeOn.Schedule(func() {
			if !subscriber.Canceled() {
				observers.len = 1 + len(other)
				o(observer, subscribeOn, subscriber)
				for _, o := range other {
					if subscriber.Canceled() {
						return
					}
					o(observer, subscribeOn, subscriber)
				}
			}
		})
	}
	return observable
}

//jig:name ObservableMergeMap

// MergeMap transforms the items emitted by an Observable by applying a
// function to each item an returning an Observable. The stream of Observable
// items is then merged into a single stream of  items using the MergeAll operator.
func (o Observable) MergeMap(project func(interface{}) Observable) Observable {
	return o.MapObservable(project).MergeAll()
}

//jig:name ObservableObservableMergeAll

// MergeAll flattens a higher order observable by merging the observables it emits.
func (o ObservableObservable) MergeAll() Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		var observers struct {
			sync.Mutex
			done	bool
			len	int32
		}
		observer := func(next interface{}, err error, done bool) {
			observers.Lock()
			defer observers.Unlock()
			if !observers.done {
				switch {
				case !done:
					observe(next, nil, false)
				case err != nil:
					observers.done = true
					var zero interface{}
					observe(zero, err, true)
				default:
					if atomic.AddInt32(&observers.len, -1) == 0 {
						var zero interface{}
						observe(zero, nil, true)
					}
				}
			}
		}
		merger := func(next Observable, err error, done bool) {
			if !done {
				atomic.AddInt32(&observers.len, 1)
				next(observer, subscribeOn, subscriber)
			} else {
				var zero interface{}
				observer(zero, err, true)
			}
		}
		subscribeOn.Schedule(func() {
			if !subscriber.Canceled() {
				observers.len = 1
				o(merger, subscribeOn, subscriber)
			}
		})
	}
	return observable
}

//jig:name ObservableAll

// All determines whether all items emitted by an Observable meet some
// criteria.
//
// Pass a predicate function to the All operator that accepts an item emitted
// by the source Observable and returns a boolean value based on an
// evaluation of that item. All returns an ObservableBool that emits a single
// boolean value: true if and only if the source Observable terminates
// normally and every item emitted by the source Observable evaluated as
// true according to this predicate; false if any item emitted by the source
// Observable evaluates as false according to this predicate.
func (o Observable) All(predicate func(next interface{}) bool) ObservableBool {
	observable := func(observe BoolObserver, subscribeOn Scheduler, subscriber Subscriber) {
		observer := func(next interface{}, err error, done bool) {
			switch {
			case !done:
				if !predicate(next) {
					observe(false, nil, false)
					observe(false, nil, true)
				}
			case err != nil:
				observe(false, err, true)
			default:
				observe(true, nil, false)
				observe(false, nil, true)
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ErrTypecastToBool

// ErrTypecastToBool is delivered to an observer if the generic value cannot be
// typecast to bool.
const ErrTypecastToBool = RxError("typecast to bool failed")

//jig:name ObservableAsObservableBool

// AsBool turns an Observable of interface{} into an ObservableBool. If during
// observing a typecast fails, the error ErrTypecastToBool will be emitted.
func (o Observable) AsObservableBool() ObservableBool {
	observable := func(observe BoolObserver, subscribeOn Scheduler, subscriber Subscriber) {
		observer := func(next interface{}, err error, done bool) {
			if !done {
				if nextBool, ok := next.(bool); ok {
					observe(nextBool, err, done)
				} else {
					var zeroBool bool
					observe(zeroBool, ErrTypecastToBool, true)
				}
			} else {
				var zeroBool bool
				observe(zeroBool, err, true)
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ErrTypecastToInt

// ErrTypecastToInt is delivered to an observer if the generic value cannot be
// typecast to int.
const ErrTypecastToInt = RxError("typecast to int failed")

//jig:name ObservableAsObservableInt

// AsInt turns an Observable of interface{} into an ObservableInt. If during
// observing a typecast fails, the error ErrTypecastToInt will be emitted.
func (o Observable) AsObservableInt() ObservableInt {
	observable := func(observe IntObserver, subscribeOn Scheduler, subscriber Subscriber) {
		observer := func(next interface{}, err error, done bool) {
			if !done {
				if nextInt, ok := next.(int); ok {
					observe(nextInt, err, done)
				} else {
					var zeroInt int
					observe(zeroInt, ErrTypecastToInt, true)
				}
			} else {
				var zeroInt int
				observe(zeroInt, err, true)
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableBoolAsObservable

// AsObservable turns a typed ObservableBool into an Observable of interface{}.
func (o ObservableBool) AsObservable() Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		observer := func(next bool, err error, done bool) {
			observe(interface{}(next), err, done)
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableIntAsObservable

// AsObservable turns a typed ObservableInt into an Observable of interface{}.
func (o ObservableInt) AsObservable() Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		observer := func(next int, err error, done bool) {
			observe(interface{}(next), err, done)
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableIntAverage

// Average calculates the average of numbers emitted by an ObservableInt and
// emits this average.
func (o ObservableInt) Average() ObservableInt {
	observable := func(observe IntObserver, subscribeOn Scheduler, subscriber Subscriber) {
		var sum, count int
		observer := func(next int, err error, done bool) {
			if !done {
				sum += next
				count++
			} else {
				if count > 0 {
					observe(sum/count, nil, false)
				}
				var zeroInt int
				observe(zeroInt, err, done)
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableCatch

// Catch recovers from an error notification by continuing the sequence without
// emitting the error but by switching to the catch Observable to provide
// items.
func (o Observable) Catch(catch Observable) Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		observer := func(next interface{}, err error, done bool) {
			if err != nil {
				catch(observe, subscribeOn, subscriber)
			} else {
				observe(next, err, done)
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableCount

// Count counts the number of items emitted by the source Observable and
// emits only this value.
func (o Observable) Count() ObservableInt {
	observable := func(observe IntObserver, subscribeOn Scheduler, subscriber Subscriber) {
		var count int
		observer := func(next interface{}, err error, done bool) {
			if !done {
				count++
			} else {
				observe(count, nil, false)
				observe(0, err, done)
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableDebounce

// Debounce only emits the last item of a burst from an Observable if a
// particular timespan has passed without it emitting another item.
func (o Observable) Debounce(duration time.Duration) Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		valuech := make(chan interface{})
		donech := make(chan error)
		debouncer := func() {
			var nextValue interface{}
			var timeout <-chan time.Time
			for {
				select {
				case nextValue = <-valuech:
					timeout = time.After(duration)
				case err, subscribed := <-donech:
					if !subscribed {
						return
					}
					if timeout != nil {
						observe(nextValue, nil, false)
					}
					if err != nil {
						observe(nil, err, true)
					} else {
						observe(nil, nil, true)
					}
				case <-timeout:
					observe(nextValue, nil, false)
					timeout = nil
				}
			}
		}
		go debouncer()
		observer := func(next interface{}, err error, done bool) {
			if !done {
				valuech <- next
			} else {
				donech <- err
			}
		}
		subscriber.OnUnsubscribe(func() {
			close(donech)
		})
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableDelay

// Delay shifts the emission from an Observable forward in time by a particular amount of time.
func (o Observable) Delay(duration time.Duration) Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		firstTime := true
		observer := func(next interface{}, err error, done bool) {
			if firstTime {
				firstTime = false
				time.Sleep(duration)
			}
			observe(next, err, done)
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableDistinct

// Distinct suppress duplicate items emitted by an Observable
func (o Observable) Distinct() Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		seen := map[interface{}]struct{}{}
		observer := func(next interface{}, err error, done bool) {
			if !done {
				if _, present := seen[next]; present {
					return
				}
				seen[next] = struct{}{}
			}
			observe(next, err, done)
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableDo

// Do calls a function for each next value passing through the observable.
func (o Observable) Do(f func(next interface{})) Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		observer := func(next interface{}, err error, done bool) {
			if !done {
				f(next)
			}
			observe(next, err, done)
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableDoOnComplete

// DoOnComplete calls a function when the stream completes.
func (o Observable) DoOnComplete(f func()) Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		observer := func(next interface{}, err error, done bool) {
			if err == nil && done {
				f()
			}
			observe(next, err, done)
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableDoOnError

// DoOnError calls a function for any error on the stream.
func (o Observable) DoOnError(f func(err error)) Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		observer := func(next interface{}, err error, done bool) {
			if err != nil {
				f(err)
			}
			observe(next, err, done)
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableElementAt

// ElementAt emit only item n emitted by an Observable
func (o Observable) ElementAt(n int) Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		i := 0
		observer := func(next interface{}, err error, done bool) {
			if done || i == n {
				observe(next, err, done)
			}
			i++
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableFilter

// Filter emits only those items from an Observable that pass a predicate test.
func (o Observable) Filter(predicate func(next interface{}) bool) Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		observer := func(next interface{}, err error, done bool) {
			if done || predicate(next) {
				observe(next, err, done)
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableFinally

// Finally applies a function for any error or completion on the stream.
// This doesn't expose whether this was an error or a completion.
func (o Observable) Finally(f func()) Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		observer := func(next interface{}, err error, done bool) {
			if done {
				f()
			}
			observe(next, err, done)
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableFirst

// First emits only the first item, or the first item that meets a condition, from an Observable.
func (o Observable) First() Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		start := true
		observer := func(next interface{}, err error, done bool) {
			if done || start {
				observe(next, err, done)
			}
			start = false
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableIgnoreCompletion

// IgnoreCompletion only emits items and never completes, neither with Error nor with Complete.
func (o Observable) IgnoreCompletion() Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		observer := func(next interface{}, err error, done bool) {
			if !done {
				observe(next, err, done)
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableIgnoreElements

// IgnoreElements does not emit any items from an Observable but mirrors its termination notification.
func (o Observable) IgnoreElements() Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		observer := func(next interface{}, err error, done bool) {
			if done {
				observe(next, err, done)
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableLast

// Last emits only the last item emitted by an Observable.
func (o Observable) Last() Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		have := false
		var last interface{}
		observer := func(next interface{}, err error, done bool) {
			if done {
				if have {
					observe(last, nil, false)
				}
				observe(nil, err, true)
			} else {
				last = next
				have = true
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableMap

// Map transforms the items emitted by an Observable by applying a
// function to each item.
func (o Observable) Map(project func(interface{}) interface{}) Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		observer := func(next interface{}, err error, done bool) {
			var mapped interface{}
			if !done {
				mapped = project(next)
			}
			observe(mapped, err, done)
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableIntMapObservable

// MapObservable transforms the items emitted by an ObservableInt by applying a
// function to each item.
func (o ObservableInt) MapObservable(project func(int) Observable) ObservableObservable {
	observable := func(observe ObservableObserver, subscribeOn Scheduler, subscriber Subscriber) {
		observer := func(next int, err error, done bool) {
			var mapped Observable
			if !done {
				mapped = project(next)
			}
			observe(mapped, err, done)
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableIntMax

// Max determines, and emits, the maximum-valued item emitted by an
// ObservableInt.
func (o ObservableInt) Max() ObservableInt {
	observable := func(observe IntObserver, subscribeOn Scheduler, subscriber Subscriber) {
		var started bool
		var max int
		observer := func(next int, err error, done bool) {
			if started {
				if !done {
					if max < next {
						max = next
					}
				} else {
					observe(max, nil, false)
					var zeroInt int
					observe(zeroInt, err, done)
				}
			} else {
				if !done {
					max = next
					started = true
				} else {
					var zeroInt int
					observe(zeroInt, err, done)
				}
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableIntMin

// Min determines, and emits, the minimum-valued item emitted by an
// ObservableInt.
func (o ObservableInt) Min() ObservableInt {
	observable := func(observe IntObserver, subscribeOn Scheduler, subscriber Subscriber) {
		var started bool
		var min int
		observer := func(next int, err error, done bool) {
			if started {
				if !done {
					if min > next {
						min = next
					}
				} else {
					observe(min, nil, false)
					var zeroInt int
					observe(zeroInt, err, done)
				}
			} else {
				if !done {
					min = next
					started = true
				} else {
					var zeroInt int
					observe(zeroInt, err, done)
				}

			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableObserveOn

// ObserveOn specifies a schedule function to use for delivering values to the observer.
func (o Observable) ObserveOn(schedule func(task func())) Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		observer := func(next interface{}, err error, done bool) {
			task := func() {
				observe(next, err, done)
			}
			schedule(task)
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableOnlyBool

// OnlyBool filters the value stream of an Observable of interface{} and outputs only the
// bool typed values.
func (o Observable) OnlyBool() ObservableBool {
	observable := func(observe BoolObserver, subscribeOn Scheduler, subscriber Subscriber) {
		observer := func(next interface{}, err error, done bool) {
			if !done {
				if nextBool, ok := next.(bool); ok {
					observe(nextBool, err, done)
				}
			} else {
				var zeroBool bool
				observe(zeroBool, err, true)
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableOnlyInt

// OnlyInt filters the value stream of an Observable of interface{} and outputs only the
// int typed values.
func (o Observable) OnlyInt() ObservableInt {
	observable := func(observe IntObserver, subscribeOn Scheduler, subscriber Subscriber) {
		observer := func(next interface{}, err error, done bool) {
			if !done {
				if nextInt, ok := next.(int); ok {
					observe(nextInt, err, done)
				}
			} else {
				var zeroInt int
				observe(zeroInt, err, true)
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableReduce

// Reduce applies a reducer function to each item emitted by an Observable
// and the previous reducer result. The operator accepts a seed argument that
// is passed to the reducer for the first item emitted by the Observable.
// Reduce emits only the final value.
func (o Observable) Reduce(reducer func(interface{}, interface{}) interface{}, seed interface{}) Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		state := seed
		observer := func(next interface{}, err error, done bool) {
			if !done {
				state = reducer(state, next)
			} else {
				if err == nil {
					observe(state, nil, false)
				}
				var zero interface{}
				observe(zero, err, done)
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableRepeat

// Repeat creates an Observable that emits a sequence of items repeatedly.
func (o Observable) Repeat(count int) Observable {
	if count == 0 {
		return Empty()
	}
	observable := func(observe Observer, scheduler Scheduler, subscriber Subscriber) {
		var repeated int
		var observer Observer
		observer = func(next interface{}, err error, done bool) {
			if !done || err != nil {
				observe(next, err, done)
			} else {
				repeated++
				if repeated < count {
					o(observer, scheduler, subscriber)
				} else {
					observe(nil, nil, true)
				}
			}
		}
		o(observer, scheduler, subscriber)
	}
	return observable
}

//jig:name ObservableRetry

// Retry if a source Observable sends an error notification, resubscribe to
// it in the hopes that it will complete without error.
func (o Observable) Retry() Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		var observer Observer
		observer = func(next interface{}, err error, done bool) {
			if err != nil {
				o(observer, subscribeOn, subscriber)
			} else {
				observe(next, nil, done)
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableSample

// Sample emits the most recent item emitted by an Observable within periodic time intervals.
func (o Observable) Sample(window time.Duration) Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		var unsubscribe = make(chan struct{})
		var last struct {
			sync.Mutex
			Fresh	bool
			Value	interface{}
		}
		sampler := func() {
			for {
				select {
				case <-time.After(window):
					var (
						fresh	bool
						value	interface{}
					)
					last.Lock()
					if last.Fresh {
						last.Fresh = false
						fresh = true
						value = last.Value
					}
					last.Unlock()
					if fresh {
						observe(value, nil, false)
					}
				case <-unsubscribe:
					return
				}
			}
		}
		go sampler()
		observer := func(next interface{}, err error, done bool) {
			if !done {
				last.Lock()
				last.Fresh = true
				last.Value = next
				last.Unlock()
			} else {
				observe(nil, err, true)
			}
		}
		subscriber.OnUnsubscribe(func() {
			close(unsubscribe)
		})
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableScan

// Scan applies a accumulator function to each item emitted by an
// Observable and the previous accumulator result. The operator accepts a
// seed argument that is passed to the accumulator for the first item emitted
// by the Observable. Scan emits every value, both intermediate and final.
func (o Observable) Scan(accumulator func(interface{}, interface{}) interface{}, seed interface{}) Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		state := seed
		observer := func(next interface{}, err error, done bool) {
			if !done {
				state = accumulator(state, next)
				observe(state, nil, false)
			} else {
				var zero interface{}
				observe(zero, err, done)
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableSerialize

// Serialize forces an Observable to make serialized calls and to be
// well-behaved.
func (o Observable) Serialize() Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		var observer struct {
			sync.Mutex
			done	bool
		}
		serializer := func(next interface{}, err error, done bool) {
			observer.Lock()
			defer observer.Unlock()
			if !observer.done {
				observer.done = done
				observe(next, err, done)
			}
		}
		o(serializer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableSingle

// Single enforces that the observable sends exactly one data item and then
// completes. If the observable sends no data before completing or sends more
// than 1 item before completing, this is reported as an error to the observer.
func (o Observable) Single() Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		var (
			count	int
			latest	interface{}
		)
		observer := func(next interface{}, err error, done bool) {
			if count < 2 {
				if done {
					if err != nil {
						observe(nil, err, true)
					} else {
						if count == 1 {
							observe(latest, nil, false)
							observe(nil, nil, true)
						} else {
							observe(nil, RxError("expected one value, got none"), true)
						}
					}
				} else {
					count++
					if count == 1 {
						latest = next
					} else {
						observe(nil, RxError("expected one value, got multiple"), true)
					}
				}
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableSkip

// Skip suppresses the first n items emitted by an Observable.
func (o Observable) Skip(n int) Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		i := 0
		observer := func(next interface{}, err error, done bool) {
			if done || i >= n {
				observe(next, err, done)
			}
			i++
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableSkipLast

// SkipLast suppresses the last n items emitted by an Observable.
func (o Observable) SkipLast(n int) Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		read := 0
		write := 0
		n++
		buffer := make([]interface{}, n)
		observer := func(next interface{}, err error, done bool) {
			if done {
				observe(nil, err, true)
			} else {
				buffer[write] = next
				write = (write + 1) % n
				if write == read {
					observe(buffer[read], nil, false)
					read = (read + 1) % n
				}
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableSubscribeOn

// SubscribeOn specifies the scheduler an Observable should use when it is
// subscribed to.
func (o Observable) SubscribeOn(subscribeOn Scheduler) Observable {
	observable := func(observe Observer, _ Scheduler, subscriber Subscriber) {
		subscriber.OnWait(subscribeOn.Wait)
		o(observe, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableIntSum

// Sum calculates the sum of numbers emitted by an ObservableInt and emits this sum.
func (o ObservableInt) Sum() ObservableInt {
	observable := func(observe IntObserver, subscribeOn Scheduler, subscriber Subscriber) {
		var sum int
		observer := func(next int, err error, done bool) {
			if !done {
				sum += next
			} else {
				observe(sum, nil, false)
				var zeroInt int
				observe(zeroInt, err, done)
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableTake

// Take emits only the first n items emitted by an Observable.
func (o Observable) Take(n int) Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		taken := 0
		observer := func(next interface{}, err error, done bool) {
			if taken < n {
				observe(next, err, done)
				if !done {
					taken++
					if taken >= n {
						observe(nil, nil, true)
					}
				}
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableIntTake

// Take emits only the first n items emitted by an ObservableInt.
func (o ObservableInt) Take(n int) ObservableInt {
	return o.AsObservable().Take(n).AsObservableInt()
}

//jig:name ObservableTakeLast

// TakeLast emits only the last n items emitted by an Observable.
func (o Observable) TakeLast(n int) Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		read := 0
		write := 0
		n++
		buffer := make([]interface{}, n)
		observer := func(next interface{}, err error, done bool) {
			if done {
				for read != write {
					observe(buffer[read], nil, false)
					read = (read + 1) % n
				}
				observe(nil, err, true)
			} else {
				buffer[write] = next
				write = (write + 1) % n
				if write == read {
					read = (read + 1) % n
				}
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableTakeUntil

// TakeUntil emits items emitted by an Observable until another Observable emits an item.
func (o Observable) TakeUntil(other Observable) Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		var watcherNext int32
		watcherSubscriber := subscriber.Add()
		watcher := func(next interface{}, err error, done bool) {
			if !done {
				atomic.StoreInt32(&watcherNext, 1)
			}
			watcherSubscriber.Unsubscribe()
		}
		other(watcher, subscribeOn, watcherSubscriber)

		observer := func(next interface{}, err error, done bool) {
			if done || atomic.LoadInt32(&watcherNext) != 1 {
				observe(next, err, done)
			} else {
				observe(nil, nil, true)
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableTakeWhile

// TakeWhile mirrors items emitted by an Observable until a specified condition becomes false.
//
// The TakeWhile mirrors the source Observable until such time as some condition you specify
// becomes false, at which point TakeWhile stops mirroring the source Observable and terminates
// its own Observable.
func (o Observable) TakeWhile(condition func(next interface{}) bool) Observable {
	observable := func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		observer := func(next interface{}, err error, done bool) {
			if done || condition(next) {
				observe(next, err, done)
			} else {
				observe(nil, nil, true)
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableTimeout

// ErrTimeout is delivered to an observer if the stream times out.
const ErrTimeout = RxError("timeout")

// Timeout mirrors the source Observable, but issues an error notification if a
// particular period of time elapses without any emitted items.
// Timeout schedules tasks on the scheduler passed to this
func (o Observable) Timeout(timeout time.Duration) Observable {
	observable := Observable(func(observe Observer, subscribeOn Scheduler, subscriber Subscriber) {
		if subscriber.Canceled() {
			return
		}
		var last struct {
			sync.Mutex
			at	time.Time
			done	bool
		}
		last.at = subscribeOn.Now()
		timer := func(self func(time.Duration)) {
			last.Lock()
			defer last.Unlock()
			if last.done || subscriber.Canceled() {
				return
			}
			deadline := last.at.Add(timeout)
			now := subscribeOn.Now()
			if now.Before(deadline) {
				self(deadline.Sub(now))
				return
			}
			last.done = true
			observe(nil, ErrTimeout, true)
		}
		runner := subscribeOn.ScheduleFutureRecursive(timeout, timer)
		subscriber.OnUnsubscribe(runner.Cancel)
		observer := func(next interface{}, err error, done bool) {
			last.Lock()
			defer last.Unlock()
			if last.done || subscriber.Canceled() {
				return
			}
			now := subscribeOn.Now()
			deadline := last.at.Add(timeout)
			if !now.Before(deadline) {
				return
			}
			last.done = done
			last.at = now
			observe(next, err, done)
		}
		o(observer, subscribeOn, subscriber)
	})
	return observable.Serialize()
}

//jig:name ObservablePrintln

// Println subscribes to the Observable and prints every item to os.Stdout
// while it waits for completion or error. Returns either the error or nil
// when the Observable completed normally.
// Println is performed on the Trampoline scheduler.
func (o Observable) Println() (err error) {
	subscriber := subscriber.New()
	scheduler := scheduler.Trampoline
	observer := func(next interface{}, e error, done bool) {
		if !done {
			fmt.Println(next)
		} else {
			err = e
			subscriber.Unsubscribe()
		}
	}
	subscriber.OnWait(scheduler.Wait)
	o(observer, scheduler, subscriber)
	subscriber.Wait()
	return
}

//jig:name ObservableBoolPrintln

// Println subscribes to the Observable and prints every item to os.Stdout
// while it waits for completion or error. Returns either the error or nil
// when the Observable completed normally.
// Println is performed on the Trampoline scheduler.
func (o ObservableBool) Println() (err error) {
	subscriber := subscriber.New()
	scheduler := scheduler.Trampoline
	observer := func(next bool, e error, done bool) {
		if !done {
			fmt.Println(next)
		} else {
			err = e
			subscriber.Unsubscribe()
		}
	}
	subscriber.OnWait(scheduler.Wait)
	o(observer, scheduler, subscriber)
	subscriber.Wait()
	return
}

//jig:name ObservableIntPrintln

// Println subscribes to the Observable and prints every item to os.Stdout
// while it waits for completion or error. Returns either the error or nil
// when the Observable completed normally.
// Println is performed on the Trampoline scheduler.
func (o ObservableInt) Println() (err error) {
	subscriber := subscriber.New()
	scheduler := scheduler.Trampoline
	observer := func(next int, e error, done bool) {
		if !done {
			fmt.Println(next)
		} else {
			err = e
			subscriber.Unsubscribe()
		}
	}
	subscriber.OnWait(scheduler.Wait)
	o(observer, scheduler, subscriber)
	subscriber.Wait()
	return
}

//jig:name Subscription

// Subscription is an alias for the subscriber.Subscription interface type.
type Subscription = subscriber.Subscription

//jig:name ObservableSubscribe

// Subscribe operates upon the emissions and notifications from an Observable.
// This method returns a Subscription.
// Subscribe by default is performed on the Trampoline scheduler.
func (o Observable) Subscribe(observe Observer, subscribers ...Subscriber) Subscription {
	subscribers = append(subscribers, subscriber.New())
	scheduler := scheduler.Trampoline
	observer := func(next interface{}, err error, done bool) {
		if !done {
			observe(next, err, done)
		} else {
			var zero interface{}
			observe(zero, err, true)
			subscribers[0].Unsubscribe()
		}
	}
	subscribers[0].OnWait(scheduler.Wait)
	o(observer, scheduler, subscribers[0])
	return subscribers[0]
}

//jig:name ObservableBoolSubscribe

// Subscribe operates upon the emissions and notifications from an Observable.
// This method returns a Subscription.
// Subscribe by default is performed on the Trampoline scheduler.
func (o ObservableBool) Subscribe(observe BoolObserver, subscribers ...Subscriber) Subscription {
	subscribers = append(subscribers, subscriber.New())
	scheduler := scheduler.Trampoline
	observer := func(next bool, err error, done bool) {
		if !done {
			observe(next, err, done)
		} else {
			var zeroBool bool
			observe(zeroBool, err, true)
			subscribers[0].Unsubscribe()
		}
	}
	subscribers[0].OnWait(scheduler.Wait)
	o(observer, scheduler, subscribers[0])
	return subscribers[0]
}

//jig:name ObservableIntSubscribe

// Subscribe operates upon the emissions and notifications from an Observable.
// This method returns a Subscription.
// Subscribe by default is performed on the Trampoline scheduler.
func (o ObservableInt) Subscribe(observe IntObserver, subscribers ...Subscriber) Subscription {
	subscribers = append(subscribers, subscriber.New())
	scheduler := scheduler.Trampoline
	observer := func(next int, err error, done bool) {
		if !done {
			observe(next, err, done)
		} else {
			var zeroInt int
			observe(zeroInt, err, true)
			subscribers[0].Unsubscribe()
		}
	}
	subscribers[0].OnWait(scheduler.Wait)
	o(observer, scheduler, subscribers[0])
	return subscribers[0]
}

//jig:name ObservableToChan

// ToChan returns a channel that emits interface{} values. If the source
// observable does not emit values but emits an error or complete, then the
// returned channel will enit any error and then close without emitting any
// values.
//
// This method subscribes to the observable on the Goroutine scheduler because
// it needs the concurrency so the returned channel can be used by used
// by the calling code directly. To cancel ToChan you will need to supply a
// subscriber that you hold on to.
func (o Observable) ToChan(subscribers ...Subscriber) <-chan interface{} {
	scheduler := scheduler.Goroutine
	subscribers = append(subscribers, subscriber.New())
	donech := make(chan struct{})
	nextch := make(chan interface{})
	const (
		idle	= iota
		busy
		closed
	)
	state := int32(idle)
	observer := func(next interface{}, err error, done bool) {
		if atomic.CompareAndSwapInt32(&state, idle, busy) {
			if err != nil {
				next = err
			}
			if !done || err != nil {
				select {
				case <-donech:
					atomic.StoreInt32(&state, closed)
				default:
					select {
					case <-donech:
						atomic.StoreInt32(&state, closed)
					case nextch <- next:
					}
				}
			}
			if done {
				atomic.StoreInt32(&state, closed)
				subscribers[0].Unsubscribe()
			}
			if !atomic.CompareAndSwapInt32(&state, busy, idle) {
				close(nextch)
			}
		}
	}
	subscribers[0].OnUnsubscribe(func() {
		close(donech)
		if atomic.CompareAndSwapInt32(&state, busy, closed) {
			return
		}
		if atomic.CompareAndSwapInt32(&state, idle, closed) {
			close(nextch)
			return
		}
	})
	o(observer, scheduler, subscribers[0])
	return nextch
}

//jig:name ObservableBoolToChan

// ToChan returns a channel that emits bool values. If the source observable does
// not emit values but emits an error or complete, then the returned channel
// will close without emitting any values.
//
// This method subscribes to the observable on the Goroutine scheduler because
// it needs the concurrency so the returned channel can be used by used
// by the calling code directly. To cancel ToChan you will need to supply a
// subscriber that you hold on to.
func (o ObservableBool) ToChan(subscribers ...Subscriber) <-chan bool {
	scheduler := scheduler.Goroutine
	subscribers = append(subscribers, subscriber.New())
	donech := make(chan struct{})
	nextch := make(chan bool)
	const (
		idle	= iota
		busy
		closed
	)
	state := int32(idle)
	observer := func(next bool, err error, done bool) {
		if atomic.CompareAndSwapInt32(&state, idle, busy) {
			if !done {
				select {
				case <-donech:
					atomic.StoreInt32(&state, closed)
				default:
					select {
					case <-donech:
						atomic.StoreInt32(&state, closed)
					case nextch <- next:
					}
				}
			} else {
				atomic.StoreInt32(&state, closed)
				subscribers[0].Unsubscribe()
			}
			if !atomic.CompareAndSwapInt32(&state, busy, idle) {
				close(nextch)
			}
		}
	}
	subscribers[0].OnUnsubscribe(func() {
		close(donech)
		if atomic.CompareAndSwapInt32(&state, busy, closed) {
			return
		}
		if atomic.CompareAndSwapInt32(&state, idle, closed) {
			close(nextch)
			return
		}
	})
	o(observer, scheduler, subscribers[0])
	return nextch
}

//jig:name ObservableIntToChan

// ToChan returns a channel that emits int values. If the source observable does
// not emit values but emits an error or complete, then the returned channel
// will close without emitting any values.
//
// This method subscribes to the observable on the Goroutine scheduler because
// it needs the concurrency so the returned channel can be used by used
// by the calling code directly. To cancel ToChan you will need to supply a
// subscriber that you hold on to.
func (o ObservableInt) ToChan(subscribers ...Subscriber) <-chan int {
	scheduler := scheduler.Goroutine
	subscribers = append(subscribers, subscriber.New())
	donech := make(chan struct{})
	nextch := make(chan int)
	const (
		idle	= iota
		busy
		closed
	)
	state := int32(idle)
	observer := func(next int, err error, done bool) {
		if atomic.CompareAndSwapInt32(&state, idle, busy) {
			if !done {
				select {
				case <-donech:
					atomic.StoreInt32(&state, closed)
				default:
					select {
					case <-donech:
						atomic.StoreInt32(&state, closed)
					case nextch <- next:
					}
				}
			} else {
				atomic.StoreInt32(&state, closed)
				subscribers[0].Unsubscribe()
			}
			if !atomic.CompareAndSwapInt32(&state, busy, idle) {
				close(nextch)
			}
		}
	}
	subscribers[0].OnUnsubscribe(func() {
		close(donech)
		if atomic.CompareAndSwapInt32(&state, busy, closed) {
			return
		}
		if atomic.CompareAndSwapInt32(&state, idle, closed) {
			close(nextch)
			return
		}
	})
	o(observer, scheduler, subscribers[0])
	return nextch
}

//jig:name ObservableToSingle

// ToSingle blocks until the Observable emits exactly one value or an error.
// The value and any error are returned.
func (o Observable) ToSingle() (entry interface{}, err error) {
	o = o.Single()
	subscriber := subscriber.New()
	scheduler := scheduler.Trampoline
	observer := func(next interface{}, e error, done bool) {
		if !done {
			entry = next
		} else {
			err = e
			subscriber.Unsubscribe()
		}
	}
	subscriber.OnWait(scheduler.Wait)
	o(observer, scheduler, subscriber)
	subscriber.Wait()
	return
}

//jig:name ObservableBoolToSingle

// ToSingle blocks until the ObservableBool emits exactly one value or an error.
// The value and any error are returned.
func (o ObservableBool) ToSingle() (entry bool, err error) {
	o = o.Single()
	subscriber := subscriber.New()
	scheduler := scheduler.Trampoline
	observer := func(next bool, e error, done bool) {
		if !done {
			entry = next
		} else {
			err = e
			subscriber.Unsubscribe()
		}
	}
	subscriber.OnWait(scheduler.Wait)
	o(observer, scheduler, subscriber)
	subscriber.Wait()
	return
}

//jig:name ObservableIntToSingle

// ToSingle blocks until the ObservableInt emits exactly one value or an error.
// The value and any error are returned.
func (o ObservableInt) ToSingle() (entry int, err error) {
	o = o.Single()
	subscriber := subscriber.New()
	scheduler := scheduler.Trampoline
	observer := func(next int, e error, done bool) {
		if !done {
			entry = next
		} else {
			err = e
			subscriber.Unsubscribe()
		}
	}
	subscriber.OnWait(scheduler.Wait)
	o(observer, scheduler, subscriber)
	subscriber.Wait()
	return
}

//jig:name ObservableToSlice

// ToSlice collects all values from the Observable into an slice. The
// complete slice and any error are returned.
func (o Observable) ToSlice() (slice []interface{}, err error) {
	subscriber := subscriber.New()
	scheduler := scheduler.Trampoline
	observer := func(next interface{}, e error, done bool) {
		if !done {
			slice = append(slice, next)
		} else {
			err = e
			subscriber.Unsubscribe()
		}
	}
	subscriber.OnWait(scheduler.Wait)
	o(observer, scheduler, subscriber)
	subscriber.Wait()
	return
}

//jig:name ObservableBoolToSlice

// ToSlice collects all values from the ObservableBool into an slice. The
// complete slice and any error are returned.
func (o ObservableBool) ToSlice() (slice []bool, err error) {
	subscriber := subscriber.New()
	scheduler := scheduler.Trampoline
	observer := func(next bool, e error, done bool) {
		if !done {
			slice = append(slice, next)
		} else {
			err = e
			subscriber.Unsubscribe()
		}
	}
	subscriber.OnWait(scheduler.Wait)
	o(observer, scheduler, subscriber)
	subscriber.Wait()
	return
}

//jig:name ObservableIntToSlice

// ToSlice collects all values from the ObservableInt into an slice. The
// complete slice and any error are returned.
func (o ObservableInt) ToSlice() (slice []int, err error) {
	subscriber := subscriber.New()
	scheduler := scheduler.Trampoline
	observer := func(next int, e error, done bool) {
		if !done {
			slice = append(slice, next)
		} else {
			err = e
			subscriber.Unsubscribe()
		}
	}
	subscriber.OnWait(scheduler.Wait)
	o(observer, scheduler, subscriber)
	subscriber.Wait()
	return
}

//jig:name ObservableWait

// Wait subscribes to the Observable and waits for completion or error.
// Returns either the error or nil when the Observable completed normally.
// Subscribing is performed on the Trampoline scheduler.
func (o Observable) Wait() (err error) {
	subscriber := subscriber.New()
	scheduler := scheduler.Trampoline
	observer := func(next interface{}, e error, done bool) {
		if done {
			err = e
			subscriber.Unsubscribe()
		}
	}
	subscriber.OnWait(scheduler.Wait)
	o(observer, scheduler, subscriber)
	subscriber.Wait()
	return
}

//jig:name ObservableBoolWait

// Wait subscribes to the Observable and waits for completion or error.
// Returns either the error or nil when the Observable completed normally.
// Subscribing is performed on the Trampoline scheduler.
func (o ObservableBool) Wait() (err error) {
	subscriber := subscriber.New()
	scheduler := scheduler.Trampoline
	observer := func(next bool, e error, done bool) {
		if done {
			err = e
			subscriber.Unsubscribe()
		}
	}
	subscriber.OnWait(scheduler.Wait)
	o(observer, scheduler, subscriber)
	subscriber.Wait()
	return
}

//jig:name ObservableIntWait

// Wait subscribes to the Observable and waits for completion or error.
// Returns either the error or nil when the Observable completed normally.
// Subscribing is performed on the Trampoline scheduler.
func (o ObservableInt) Wait() (err error) {
	subscriber := subscriber.New()
	scheduler := scheduler.Trampoline
	observer := func(next int, e error, done bool) {
		if done {
			err = e
			subscriber.Unsubscribe()
		}
	}
	subscriber.OnWait(scheduler.Wait)
	o(observer, scheduler, subscriber)
	subscriber.Wait()
	return
}

//jig:name FromObservable

// FromObservable creates an ObservableObservable from multiple Observable values passed in.
func FromObservable(slice ...Observable) ObservableObservable {
	var zeroObservable Observable
	observable := func(observe ObservableObserver, scheduler Scheduler, subscriber Subscriber) {
		i := 0
		runner := scheduler.ScheduleRecursive(func(self func()) {
			if subscriber.Subscribed() {
				if i < len(slice) {
					observe(slice[i], nil, false)
					if subscriber.Subscribed() {
						i++
						self()
					}
				} else {
					observe(zeroObservable, nil, true)
				}
			}
		})
		subscriber.OnUnsubscribe(runner.Cancel)
	}
	return observable
}

//jig:name ObservableMapObservable

// MapObservable transforms the items emitted by an Observable by applying a
// function to each item.
func (o Observable) MapObservable(project func(interface{}) Observable) ObservableObservable {
	observable := func(observe ObservableObserver, subscribeOn Scheduler, subscriber Subscriber) {
		observer := func(next interface{}, err error, done bool) {
			var mapped Observable
			if !done {
				mapped = project(next)
			}
			observe(mapped, err, done)
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name ObservableBoolSingle

// Single enforces that the observableBool sends exactly one data item and then
// completes. If the observable sends no data before completing or sends more
// than 1 item before completing  this reported as an error to the observer.
func (o ObservableBool) Single() ObservableBool {
	return o.AsObservable().Single().AsObservableBool()
}

//jig:name ObservableIntSingle

// Single enforces that the observableInt sends exactly one data item and then
// completes. If the observable sends no data before completing or sends more
// than 1 item before completing  this reported as an error to the observer.
func (o ObservableInt) Single() ObservableInt {
	return o.AsObservable().Single().AsObservableInt()
}
