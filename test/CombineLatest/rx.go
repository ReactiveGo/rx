// Code generated by jig; DO NOT EDIT.

//go:generate jig

package CombineLatest

import (
	"fmt"
	"sync"

	"github.com/reactivego/scheduler"
	"github.com/reactivego/subscriber"
)

//jig:name Subscriber

// Subscriber is an interface that can be passed in when subscribing to an
// Observable. It allows a set of observable subscriptions to be canceled
// from a single subscriber at the root of the subscription tree.
type Subscriber = subscriber.Subscriber

// NewSubscriber creates a new subscriber.
func NewSubscriber() Subscriber {
	return subscriber.New()
}

//jig:name Scheduler

// Scheduler is used to schedule tasks to support subscribing and observing.
type Scheduler = scheduler.Scheduler

//jig:name IntObserver

// IntObserver is a function that gets called whenever the Observable has
// something to report. The next argument is the item value that is only
// valid when the done argument is false. When done is true and the err
// argument is not nil, then the Observable has terminated with an error.
// When done is true and the err argument is nil, then the Observable has
// completed normally.
type IntObserver func(next int, err error, done bool)

//jig:name ObservableInt

// ObservableInt is a function taking an Observer, Scheduler and Subscriber.
// Calling it will subscribe the Observer to events from the Observable.
type ObservableInt func(IntObserver, Scheduler, Subscriber)

//jig:name zeroInt

var zeroInt int

//jig:name FromInt

// FromInt creates an ObservableInt from multiple int values passed in.
func FromInt(slice ...int) ObservableInt {
	observable := func(observe IntObserver, scheduler Scheduler, subscriber Subscriber) {
		i := 0
		runner := scheduler.ScheduleRecursive(func(self func()) {
			if subscriber.Subscribed() {
				if i < len(slice) {
					observe(slice[i], nil, false)
					if subscriber.Subscribed() {
						i++
						self()
					}
				} else {
					observe(zeroInt, nil, true)
				}
			}
		})
		subscriber.OnUnsubscribe(runner.Cancel)
	}
	return observable
}

//jig:name _Ints

type _Ints = []int

//jig:name ObservableObservableIntCombineAll

// CombineAll flattens an ObservableObservableInt by applying combineLatest
// when the ObservableObservableInt completes.
func (o ObservableObservableInt) CombineAll() Observable_Ints {
	observable := func(observe _IntsObserver, subscribeOn Scheduler, subscriber Subscriber) {
		observables := []ObservableInt(nil)
		var observers struct {
			sync.Mutex
			values		[]int
			initialized	int
			active		int
		}
		makeObserver := func(index int) IntObserver {
			observer := func(next int, err error, done bool) {
				observers.Lock()
				defer observers.Unlock()
				if observers.active > 0 {
					switch {
					case !done:
						if observers.values[index] == zeroInt {
							observers.initialized++
						}
						observers.values[index] = next
						if observers.initialized == len(observers.values) {
							observe(observers.values, nil, false)
						}
					case err != nil:
						observers.active = 0
						observe(zero_Ints, err, true)
					default:
						if observers.active--; observers.active == 0 {
							observe(zero_Ints, nil, true)
						}
					}
				}
			}
			return observer
		}

		observer := func(next ObservableInt, err error, done bool) {
			switch {
			case !done:
				observables = append(observables, next)
			case err != nil:
				observe(zero_Ints, err, true)
			default:
				subscribeOn.Schedule(func() {
					if !subscriber.Canceled() {
						numObservables := len(observables)
						observers.values = make([]int, numObservables)
						observers.active = numObservables
						for i, v := range observables {
							if subscriber.Canceled() {
								return
							}
							v(makeObserver(i), subscribeOn, subscriber)
						}
					}
				})
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name CombineLatestInt

// Combines multiple Observables to create an Observable whose values are
// calculated from the latest values of each of its input Observables.
func CombineLatestInt(observables ...ObservableInt) Observable_Ints {
	return FromObservableInt(observables...).CombineAll()
}

//jig:name ObservableIntObserver

// ObservableIntObserver is a function that gets called whenever the Observable has
// something to report. The next argument is the item value that is only
// valid when the done argument is false. When done is true and the err
// argument is not nil, then the Observable has terminated with an error.
// When done is true and the err argument is nil, then the Observable has
// completed normally.
type ObservableIntObserver func(next ObservableInt, err error, done bool)

//jig:name ObservableObservableInt

// ObservableObservableInt is a function taking an Observer, Scheduler and Subscriber.
// Calling it will subscribe the Observer to events from the Observable.
type ObservableObservableInt func(ObservableIntObserver, Scheduler, Subscriber)

//jig:name _IntsObserver

// _IntsObserver is a function that gets called whenever the Observable has
// something to report. The next argument is the item value that is only
// valid when the done argument is false. When done is true and the err
// argument is not nil, then the Observable has terminated with an error.
// When done is true and the err argument is nil, then the Observable has
// completed normally.
type _IntsObserver func(next _Ints, err error, done bool)

//jig:name Observable_Ints

// Observable_Ints is a function taking an Observer, Scheduler and Subscriber.
// Calling it will subscribe the Observer to events from the Observable.
type Observable_Ints func(_IntsObserver, Scheduler, Subscriber)

//jig:name zero_Ints

var zero_Ints _Ints

//jig:name zeroObservableInt

var zeroObservableInt ObservableInt

//jig:name FromObservableInt

// FromObservableInt creates an ObservableObservableInt from multiple ObservableInt values passed in.
func FromObservableInt(slice ...ObservableInt) ObservableObservableInt {
	observable := func(observe ObservableIntObserver, scheduler Scheduler, subscriber Subscriber) {
		i := 0
		runner := scheduler.ScheduleRecursive(func(self func()) {
			if subscriber.Subscribed() {
				if i < len(slice) {
					observe(slice[i], nil, false)
					if subscriber.Subscribed() {
						i++
						self()
					}
				} else {
					observe(zeroObservableInt, nil, true)
				}
			}
		})
		subscriber.OnUnsubscribe(runner.Cancel)
	}
	return observable
}

//jig:name Schedulers

func TrampolineScheduler() Scheduler {
	return scheduler.Trampoline
}

func GoroutineScheduler() Scheduler {
	return scheduler.Goroutine
}

//jig:name Observable_IntsPrintln

// Println subscribes to the Observable and prints every item to os.Stdout
// while it waits for completion or error. Returns either the error or nil
// when the Observable completed normally.
// Println is performed on the Trampoline scheduler.
func (o Observable_Ints) Println() (err error) {
	subscriber := NewSubscriber()
	scheduler := TrampolineScheduler()
	observer := func(next _Ints, e error, done bool) {
		if !done {
			fmt.Println(next)
		} else {
			err = e
			subscriber.Unsubscribe()
		}
	}
	subscriber.OnWait(scheduler.Wait)
	o(observer, scheduler, subscriber)
	subscriber.Wait()
	return
}
