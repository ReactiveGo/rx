// Code generated by jig; DO NOT EDIT.

//go:generate jig

package CombineAll

import (
	"fmt"
	"sync"

	"github.com/reactivego/scheduler"
	"github.com/reactivego/subscriber"
)

//jig:name Scheduler

// Scheduler is used to schedule tasks to support subscribing and observing.
type Scheduler = scheduler.Scheduler

//jig:name Subscriber

// Subscriber is an alias for the subscriber.Subscriber interface type.
type Subscriber = subscriber.Subscriber

// NewSubscriber creates a new subscriber.
func NewSubscriber() Subscriber {
	return subscriber.New()
}

//jig:name IntObserveFunc

// IntObserveFunc is the observer, a function that gets called whenever the
// observable has something to report. The next argument is the item value that
// is only valid when the done argument is false. When done is true and the err
// argument is not nil, then the observable has terminated with an error.
// When done is true and the err argument is nil, then the observable has
// completed normally.
type IntObserveFunc func(next int, err error, done bool)

//jig:name zeroInt

var zeroInt int

//jig:name ObservableInt

// ObservableInt is essentially a subscribe function taking an observe
// function, scheduler and an subscriber.
type ObservableInt func(IntObserveFunc, Scheduler, Subscriber)

//jig:name FromInt

// FromInt creates an ObservableInt from multiple int values passed in.
func FromInt(slice ...int) ObservableInt {
	observable := func(observe IntObserveFunc, scheduler Scheduler, subscriber Subscriber) {
		i := 0
		runner := scheduler.ScheduleRecursive(func(self func()) {
			if subscriber.Subscribed() {
				if i < len(slice) {
					observe(slice[i], nil, false)
					if subscriber.Subscribed() {
						i++
						self()
					}
				} else {
					observe(zeroInt, nil, true)
				}
			}
		})
		subscriber.OnUnsubscribe(runner.Cancel)
	}
	return observable
}

//jig:name ObservableIntObserveFunc

// ObservableIntObserveFunc is the observer, a function that gets called whenever the
// observable has something to report. The next argument is the item value that
// is only valid when the done argument is false. When done is true and the err
// argument is not nil, then the observable has terminated with an error.
// When done is true and the err argument is nil, then the observable has
// completed normally.
type ObservableIntObserveFunc func(next ObservableInt, err error, done bool)

//jig:name zeroObservableInt

var zeroObservableInt ObservableInt

//jig:name ObservableObservableInt

// ObservableObservableInt is essentially a subscribe function taking an observe
// function, scheduler and an subscriber.
type ObservableObservableInt func(ObservableIntObserveFunc, Scheduler, Subscriber)

//jig:name FromObservableInt

// FromObservableInt creates an ObservableObservableInt from multiple ObservableInt values passed in.
func FromObservableInt(slice ...ObservableInt) ObservableObservableInt {
	observable := func(observe ObservableIntObserveFunc, scheduler Scheduler, subscriber Subscriber) {
		i := 0
		runner := scheduler.ScheduleRecursive(func(self func()) {
			if subscriber.Subscribed() {
				if i < len(slice) {
					observe(slice[i], nil, false)
					if subscriber.Subscribed() {
						i++
						self()
					}
				} else {
					observe(zeroObservableInt, nil, true)
				}
			}
		})
		subscriber.OnUnsubscribe(runner.Cancel)
	}
	return observable
}

//jig:name IntSlice

type IntSlice []int

//jig:name ObservableObservableIntCombineAll

// CombineAll flattens an ObservableObservableInt by applying combineLatest
// when the ObservableObservableInt completes.
func (o ObservableObservableInt) CombineAll() ObservableIntSlice {
	observable := func(observe IntSliceObserveFunc, subscribeOn Scheduler, subscriber Subscriber) {
		observables := []ObservableInt(nil)
		var observers struct {
			sync.Mutex
			values		[]int
			initialized	int
			active		int
		}
		makeObserver := func(index int) IntObserveFunc {
			observer := func(next int, err error, done bool) {
				observers.Lock()
				defer observers.Unlock()
				if observers.active > 0 {
					switch {
					case !done:
						if observers.values[index] == zeroInt {
							observers.initialized++
						}
						observers.values[index] = next
						if observers.initialized == len(observers.values) {
							observe(observers.values, nil, false)
						}
					case err != nil:
						observers.active = 0
						observe(zeroIntSlice, err, true)
					default:
						if observers.active--; observers.active == 0 {
							observe(zeroIntSlice, nil, true)
						}
					}
				}
			}
			return observer
		}

		observer := func(next ObservableInt, err error, done bool) {
			switch {
			case !done:
				observables = append(observables, next)
			case err != nil:
				observe(zeroIntSlice, err, true)
			default:
				subscribeOn.Schedule(func() {
					if !subscriber.Canceled() {
						numObservables := len(observables)
						observers.values = make([]int, numObservables)
						observers.active = numObservables
						for i, v := range observables {
							if subscriber.Canceled() {
								return
							}
							v(makeObserver(i), subscribeOn, subscriber)
						}
					}
				})
			}
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name IntSliceObserveFunc

// IntSliceObserveFunc is the observer, a function that gets called whenever the
// observable has something to report. The next argument is the item value that
// is only valid when the done argument is false. When done is true and the err
// argument is not nil, then the observable has terminated with an error.
// When done is true and the err argument is nil, then the observable has
// completed normally.
type IntSliceObserveFunc func(next IntSlice, err error, done bool)

//jig:name zeroIntSlice

var zeroIntSlice IntSlice

//jig:name ObservableIntSlice

// ObservableIntSlice is essentially a subscribe function taking an observe
// function, scheduler and an subscriber.
type ObservableIntSlice func(IntSliceObserveFunc, Scheduler, Subscriber)

//jig:name ObservableIntSliceMapVector

// MapVector transforms the items emitted by an ObservableIntSlice by applying a
// function to each item.
func (o ObservableIntSlice) MapVector(project func(IntSlice) Vector) ObservableVector {
	observable := func(observe VectorObserveFunc, subscribeOn Scheduler, subscriber Subscriber) {
		observer := func(next IntSlice, err error, done bool) {
			var mapped Vector
			if !done {
				mapped = project(next)
			}
			observe(mapped, err, done)
		}
		o(observer, subscribeOn, subscriber)
	}
	return observable
}

//jig:name VectorObserveFunc

// VectorObserveFunc is the observer, a function that gets called whenever the
// observable has something to report. The next argument is the item value that
// is only valid when the done argument is false. When done is true and the err
// argument is not nil, then the observable has terminated with an error.
// When done is true and the err argument is nil, then the observable has
// completed normally.
type VectorObserveFunc func(next Vector, err error, done bool)

//jig:name zeroVector

var zeroVector Vector

//jig:name ObservableVector

// ObservableVector is essentially a subscribe function taking an observe
// function, scheduler and an subscriber.
type ObservableVector func(VectorObserveFunc, Scheduler, Subscriber)

//jig:name Schedulers

func TrampolineScheduler() Scheduler {
	return scheduler.Trampoline
}

func GoroutineScheduler() Scheduler {
	return scheduler.Goroutine
}

//jig:name ObservableVectorPrintln

// Println subscribes to the Observable and prints every item to os.Stdout
// while it waits for completion or error. Returns either the error or nil
// when the Observable completed normally.
// Println is performed on the Trampoline scheduler.
func (o ObservableVector) Println() (err error) {
	subscriber := NewSubscriber()
	scheduler := TrampolineScheduler()
	observer := func(next Vector, e error, done bool) {
		if !done {
			fmt.Println(next)
		} else {
			err = e
			subscriber.Unsubscribe()
		}
	}
	subscriber.OnWait(scheduler.Wait)
	o(observer, scheduler, subscriber)
	subscriber.Wait()
	return
}
