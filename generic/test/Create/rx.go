// Code generated by jig; DO NOT EDIT.

//go:generate jig --regen

package Create

import (
	"fmt"

	"github.com/reactivego/scheduler"
	"github.com/reactivego/subscriber"
)

//jig:name Scheduler

type Scheduler scheduler.Scheduler

//jig:name Subscriber

type Subscriber subscriber.Subscriber

type Subscription subscriber.Subscription

//jig:name StringObserveFunc

type StringObserveFunc func(next string, err error, done bool)

//jig:name zeroString

var zeroString string

//jig:name ObservableString

type ObservableString func(StringObserveFunc, Scheduler, Subscriber)

//jig:name StringObserveFuncMethods

func (f StringObserveFunc) Next(next string) {
	f(next, nil, false)
}

func (f StringObserveFunc) Error(err error) {
	f(zeroString, err, true)
}

func (f StringObserveFunc) Complete() {
	f(zeroString, nil, true)
}

//jig:name StringObserver

type StringObserver interface {
	// Next emits the next string value.
	Next(string)
	// Error signals an error condition.
	Error(error)
	// Complete signals that no more data is to be expected.
	Complete()
	// Closed returns true when the subscription has been canceled.
	Closed() bool
}

//jig:name CreateString

func CreateString(f func(StringObserver)) ObservableString {
	observable := func(observe StringObserveFunc, scheduler Scheduler, subscriber Subscriber) {
		scheduler.Schedule(func() {
			if subscriber.Closed() {
				return
			}
			observer := func(next string, err error, done bool) {
				if !subscriber.Closed() {
					observe(next, err, done)
				}
			}
			type ObserverSubscriber struct {
				StringObserveFunc
				Subscriber
			}
			f(&ObserverSubscriber{observer, subscriber})
		})
	}
	return observable
}

//jig:name Schedulers

func TrampolineScheduler() Scheduler	{ return scheduler.Trampoline }

func GoroutineScheduler() Scheduler	{ return scheduler.Goroutine }

//jig:name ObservableStringPrintln

func (o ObservableString) Println() (err error) {
	subscriber := subscriber.New()
	scheduler := TrampolineScheduler()
	observer := func(next string, e error, done bool) {
		if !done {
			fmt.Println(next)
		} else {
			err = e
			subscriber.Unsubscribe()
		}
	}
	o(observer, scheduler, subscriber)
	subscriber.Wait()
	return
}
